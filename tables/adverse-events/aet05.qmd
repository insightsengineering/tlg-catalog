---
title: AET05
subtitle: Adverse Event Rate Adjusted for Patient-Years at Risk -- First Occurrence
---

------------------------------------------------------------------------

::: panel-tabset
## Data Setup

```{r setup, message=FALSE}
#| code-fold: show

library(dplyr)
library(scda)
library(tern)

adsl <- synthetic_cdisc_dataset("rcd_2022_10_13", "adsl")
adaette <- synthetic_cdisc_dataset("rcd_2022_10_13", "adaette")

# Ensure character variables are converted to factors and empty strings and NAs are explicit missing levels.
adsl <- df_explicit_na(adsl)
adaette <- df_explicit_na(adaette)

anl <- adaette %>%
  dplyr::filter(PARAM == "Time to first occurrence of any adverse event") %>%
  dplyr::mutate(is_event = CNSR == 0) %>%
  dplyr::mutate(n_events = as.integer(is_event))
```

## Standard Table

```{r}
lyt <- basic_table(show_colcounts = TRUE) %>%
  split_cols_by("ARM") %>%
  estimate_incidence_rate(
    vars = "AVAL",
    n_events = "n_events",
    control = control_incidence_rate(time_unit_output = 100)
  )

result <- build_table(
  lyt,
  anl,
  alt_counts_df = adsl
)

result
```

## Table Setting Type of Confidence Interval

The type of confidence interval can be specified through the `conf_type` argument.

```{r}
lyt <- basic_table(show_colcounts = TRUE) %>%
  split_cols_by("ARM") %>%
  estimate_incidence_rate(
    vars = "AVAL",
    n_events = "n_events",
    control = control_incidence_rate(
      conf_level = 0.95,
      conf_type = "exact",
      time_unit_output = 100
    )
  )

result <- build_table(
  lyt,
  anl,
  alt_counts_df = adsl
)

result
```

## Teal

```{r teal, message=FALSE}
#| screenshot.opts = list(delay = 8)

library(scda)
library(teal.modules.clinical)

adsl <- synthetic_cdisc_dataset("rcd_2022_10_13", "adsl")
adaette <- synthetic_cdisc_dataset("rcd_2022_10_13", "adaette")

# Ensure character variables are converted to factors and empty strings and NAs are explicit missing levels.
adsl <- df_explicit_na(adsl)
adaette <- df_explicit_na(adaette)

adaette <- adaette %>%
  dplyr::filter(PARAMCD %in% c("AETTE1", "AETTE2", "AETTE3")) %>%
  dplyr::mutate(is_event = CNSR == 0) %>%
  dplyr::mutate(n_events = as.integer(is_event))

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", adsl),
    cdisc_dataset("ADAETTE", adaette),
    code =
      'ADSL <- df_explicit_na(synthetic_cdisc_dataset("rcd_2022_10_13", "adsl"))
       ADAETTE <- df_explicit_na(synthetic_cdisc_dataset("rcd_2022_10_13", "adaette"))
       ADAETTE <- ADAETTE %>%
  dplyr::filter(PARAMCD %in% c("AETTE1", "AETTE2", "AETTE3")) %>%
  dplyr::mutate(is_event = CNSR == 0) %>%
  dplyr::mutate(n_events = as.integer(is_event))',
    check = TRUE
  ),
  modules = modules(
    tm_t_events_patyear(
      label = "AE rate adjusted for patient-years at risk Table",
      dataname = "ADAETTE",
      arm_var = choices_selected(
        choices = variable_choices(adsl, c("ARM", "ARMCD")),
        selected = "ARMCD"
      ),
      paramcd = choices_selected(
        choices = value_choices(adaette, "PARAMCD", "PARAM"),
        selected = "AETTE1"
      ),
      events_var = choices_selected(
        choices = variable_choices(adaette, "n_events"),
        selected = "n_events",
        fixed = TRUE
      )
    )
  )
)

shinyApp(app$ui, app$server)
```

{{< include ../../si.qmd >}}

:::
