---
title: LBT03
subtitle: Laboratory Test Results Change from Baseline by Visit
---

------------------------------------------------------------------------

::: panel-tabset
## Data Setup

For illustration purposes, this example focuses on "C-Reactive Protein Measurement" starting from baseline, while excluding visit at week 1 for subjects who were randomized to the placebo group.

```{r setup, message=FALSE}
#| code-fold: show

library(scda)
library(dplyr)
library(tern)

adsl <- synthetic_cdisc_dataset("rcd_2022_10_13", "adsl")
adlb <- synthetic_cdisc_dataset("rcd_2022_10_13", "adlb")

# Ensure character variables are converted to factors and empty strings and NAs are explicit missing levels.
adsl <- df_explicit_na(adsl)
adlb <- df_explicit_na(adlb)

saved_labels <- var_labels(adlb)

adlb_f <- adlb %>%
  filter(
    PARAM == "C-Reactive Protein Measurement",
    !(ARM == "B: Placebo" &
      AVISIT == "WEEK 1 DAY 8"),
    AVISIT != "SCREENING"
  ) %>%
  dplyr::mutate(
    AVISIT = droplevels(AVISIT),
    ABLFLL = ABLFL == "Y"
  )

var_labels(adlb_f) <- c(saved_labels, "")
```

## Standard Table

The `LBT03` template is the result of a junction between the analysis of `AVAL` at baseline and `CHG` at visit time.
`AVAL` is summarized for baseline visits and and `CHG` is summarized for post-baseline visits.

```{r}
# Define the split function
split_fun <- drop_split_levels

lyt <- basic_table(show_colcounts = TRUE) %>%
  split_cols_by("ARM") %>%
  split_rows_by("AVISIT", split_fun = split_fun, label_pos = "topleft", split_label = obj_label(adlb_f$AVISIT)) %>%
  summarize_change(
    "CHG",
    variables = list(value = "AVAL", baseline_flag = "ABLFLL"),
    na.rm = TRUE
  )

result <- build_table(
  lyt = lyt,
  df = adlb_f,
  alt_counts_df = adsl
)

result
```

In the final step, a new variable is derived from `AVISIT` that can specify the method of estimation of the evaluated change.

```{r adjustment}
adlb_f <- adlb_f %>% mutate(AVISIT_header = recode(AVISIT,
  "BASELINE" = "BASELINE",
  "WEEK 1 DAY 8" = "WEEK 1 DAY 8 value minus baseline",
  "WEEK 2 DAY 15" = "WEEK 2 DAY 15 value minus baseline",
  "WEEK 3 DAY 22" = "WEEK 3 DAY 22 value minus baseline",
  "WEEK 4 DAY 29" = "WEEK 4 DAY 29 value minus baseline",
  "WEEK 5 DAY 36" = "WEEK 5 DAY 36 value minus baseline"
))

# Define the split function
split_fun <- drop_split_levels

lyt <- basic_table(show_colcounts = TRUE) %>%
  split_cols_by("ARM") %>%
  split_rows_by("AVISIT_header",
    split_fun = split_fun,
    label_pos = "topleft",
    split_label = obj_label(adlb_f$AVISIT)
  ) %>%
  summarize_change(
    "CHG",
    variables = list(value = "AVAL", baseline_flag = "ABLFLL"),
    na.rm = TRUE
  )

result <- build_table(
  lyt = lyt,
  df = adlb_f,
  alt_counts_df = adsl
)

result
```

## Teal

Here, we pre-process and manually define the variable "Baseline or Absolute Change from Baseline".

```{r teal, message=FALSE}
#| screenshot.opts = list(delay = 8)

library(scda)
library(teal.modules.clinical)
library(dplyr)

adsl <- df_explicit_na(synthetic_cdisc_dataset("rcd_2022_10_13", "adsl"))
adlb <- df_explicit_na(synthetic_cdisc_dataset("rcd_2022_10_13", "adlb")) %>%
  filter(
    !(ARM == "B: Placebo" & AVISIT == "WEEK 1 DAY 8"),
    AVISIT != "SCREENING"
  ) %>%
  dplyr::mutate(
    AVISIT = droplevels(AVISIT),
    ABLFLL = ABLFL == "Y",
    AVISIT_header = recode(AVISIT,
      "BASELINE" = "BASELINE",
      "WEEK 1 DAY 8" = "WEEK 1 DAY 8 value minus baseline",
      "WEEK 2 DAY 15" = "WEEK 2 DAY 15 value minus baseline",
      "WEEK 3 DAY 22" = "WEEK 3 DAY 22 value minus baseline",
      "WEEK 4 DAY 29" = "WEEK 4 DAY 29 value minus baseline",
      "WEEK 5 DAY 36" = "WEEK 5 DAY 36 value minus baseline"
    )
  ) %>%
  dplyr::group_by(USUBJID, PARAM) %>%
  dplyr::mutate(
    AVAL_CHG = AVAL - (!ABLFLL) * sum(AVAL * ABLFLL)
  ) %>%
  dplyr::ungroup() %>%
  var_relabel(
    AVAL_CHG = "Baseline or Absolute Change from Baseline",
    ABLFLL = "Baseline Flag (TRUE/FALSE)",
    AVISIT_header = "Analysis Visit"
  )

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", adsl, code = 'ADSL <- df_explicit_na(synthetic_cdisc_dataset("rcd_2022_10_13", "adsl"))'),
    cdisc_dataset("ADLB", adlb, code = '
                  ADLB <- df_explicit_na(synthetic_cdisc_dataset("rcd_2022_10_13", "adlb")) %>%
                  filter(
                    !(ARM == "B: Placebo" & AVISIT == "WEEK 1 DAY 8"),
                    AVISIT != "SCREENING"
                  ) %>%
                  dplyr::mutate(
                    AVISIT = droplevels(AVISIT),
                    ABLFLL = ABLFL == "Y",
                    AVISIT_header = recode(AVISIT,
                           "BASELINE" = "BASELINE",
                           "WEEK 1 DAY 8" = "WEEK 1 DAY 8 value minus baseline",
                           "WEEK 2 DAY 15" = "WEEK 2 DAY 15 value minus baseline",
                           "WEEK 3 DAY 22" = "WEEK 3 DAY 22 value minus baseline",
                           "WEEK 4 DAY 29" = "WEEK 4 DAY 29 value minus baseline",
                           "WEEK 5 DAY 36" = "WEEK 5 DAY 36 value minus baseline"
                           )
                  ) %>%
                  dplyr::group_by(USUBJID, PARAM) %>%
                  dplyr::mutate(
                    AVAL_CHG = AVAL - (!ABLFLL) * sum(AVAL * ABLFLL)
                  ) %>%
                  dplyr::ungroup()  %>%
                  var_relabel(
                    AVAL_CHG = "Baseline or Absolute Change from Baseline",
                    ABLFLL = "Baseline Flag (TRUE/FALSE)",
                    AVISIT_header = "Analysis Visit"
                  )'),
    check = TRUE
  ),
  modules = modules(
    tm_t_summary_by(
      label = "Laboratory Test Results Change from Baseline by Visit",
      dataname = "ADLB",
      arm_var = choices_selected(
        choices = variable_choices(adsl, c("ARM", "ARMCD")),
        selected = "ARM"
      ),
      by_vars = choices_selected(
        choices = variable_choices(adlb, c("PARAM", "AVISIT_header")), # note: order matters here. If `PARAM` is first, the split will be first by `PARAM`and then by `AVISIT`
        selected = c("PARAM", "AVISIT_header")
      ),
      summarize_vars = choices_selected(
        choices = variable_choices(adlb, c("AVAL", "CHG", "AVAL_CHG")),
        selected = c("AVAL_CHG")
      ),
      useNA = "ifany",
      paramcd = choices_selected(
        choices = value_choices(adlb, "PARAMCD", "PARAM"),
        selected = "CRP"
      )
    )
  ),
  filter = list(ADLB = list(AVAL = list()))
)
shinyApp(app$ui, app$server)
```

{{< include ../../si.qmd >}}

:::
