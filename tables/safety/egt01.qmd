---
title: EGT01
subtitle: ECG Results and Change from Baseline by Visit
---

------------------------------------------------------------------------

::: panel-tabset
## Data Setup

```{r setup, message=FALSE}
#| code-fold: show

library(dplyr)
library(tern)
library(scda)

# Data should be filtered for the studied Parameter (`PARAM`) and the
# Analysis Visit (`AVISIT`). According to the GDSR template, the values for
# the `AVISIT` reported in the EGT01 standard may be:
# 'POST-BASELINE MAXIMUM', 'POST-BASELINE MINIMUM', 'POST-BASELINE LAST'.

adsl <- synthetic_cdisc_dataset("latest", "adsl")
adeg <- synthetic_cdisc_dataset("latest", "adeg")

# Ensure character variables are converted to factors and empty strings and NAs are explicit missing levels.
adsl <- df_explicit_na(adsl)
adeg <- df_explicit_na(adeg)

adeg_f <- adeg %>%
  filter(ANL01FL == "Y" & ONTRTFL == "Y") %>%
  filter(PARAM %in% c("Heart Rate", "QT Duration", "RR Duration"))
```

## Standard Table

```{r egt01}
# Define the split function
split_fun <- drop_split_levels

afun <- function(x, .var, .spl_context, ...) {
  n_fun <- sum(!is.na(x), na.rm = TRUE)
  if (n_fun == 0) {
    mean_sd_fun <- c(NA, NA)
    median_fun <- NA
    min_max_fun <- c(NA, NA)
  } else {
    mean_sd_fun <- c(mean(x, na.rm = TRUE), sd(x, na.rm = TRUE))
    median_fun <- median(x, na.rm = TRUE)
    min_max_fun <- c(min(x), max(x))
  }
  is_chg <- .var == "CHG"
  is_baseline <- .spl_context$value[which(.spl_context$split == "AVISIT")] == "BASELINE"
  if (is_baseline && is_chg) n_fun <- mean_sd_fun <- median_fun <- min_max_fun <- NULL

  in_rows(
    "n" = n_fun,
    "Mean (SD)" = mean_sd_fun,
    "Median" = median_fun,
    "Min - Max" = min_max_fun,
    .formats = list("n" = "xx", "Mean (SD)" = "xx.xx (xx.xx)", "Median" = "xx.xx", "Min - Max" = "xx.xx - xx.xx"),
    .format_na_strs = list("n" = "NE", "Mean (SD)" = "NE (NE)", "Median" = "NE", "Min - Max" = "NE - NE")
  )
}

lyt <- basic_table(show_colcounts = TRUE) %>%
  split_cols_by("ACTARM") %>%
  split_rows_by("PARAM", split_fun = split_fun, label_pos = "topleft", split_label = obj_label(adeg_f$PARAM)) %>%
  split_rows_by("AVISIT", split_fun = split_fun, label_pos = "topleft", split_label = obj_label(adeg_f$AVISIT)) %>%
  split_cols_by_multivar(
    vars = c("AVAL", "CHG"),
    varlabels = c("Value at Visit", "Change from\nBaseline")
  ) %>%
  analyze_colvars(afun = afun)

result <- build_table(lyt, adeg_f, alt_counts_df = adsl)
result
```

## Teal

```{r teal, message=FALSE}
#| screenshot.opts = list(delay = 16)

library(teal.modules.clinical)
library(scda)

adsl <- synthetic_cdisc_dataset("latest", "adsl")
adeg <- synthetic_cdisc_dataset("latest", "adeg")

# Ensure character variables are converted to factors and empty strings and NAs are explicit missing levels.
adsl <- df_explicit_na(adsl)
adeg <- df_explicit_na(adeg)

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL",
      adsl,
      code = 'ADSL <- df_explicit_na(synthetic_cdisc_dataset("latest", "adsl"))'
    ),
    cdisc_dataset("ADEG",
      adeg,
      code = 'ADEG <- df_explicit_na(synthetic_cdisc_dataset("latest", "adeg"))'
    ),
    check = TRUE
  ),
  modules = modules(
    tm_t_summary_by(
      label = "ECG Results and Change from Baseline by Visit",
      dataname = "ADEG",
      arm_var = choices_selected(
        choices = variable_choices(adsl, c("ARM", "ARMCD")),
        selected = "ARM"
      ),
      by_vars = choices_selected(
        choices = variable_choices(adeg, c("PARAM", "AVISIT")),
        selected = c("AVISIT")
      ),
      summarize_vars = choices_selected(
        choices = variable_choices(adeg, c("AVAL", "CHG")),
        selected = c("AVAL")
      ),
      useNA = "ifany",
      paramcd = choices_selected(
        choices = value_choices(adeg, "PARAMCD", "PARAM"),
        selected = "HR"
      ),
      parallel_vars = TRUE
    )
  ),
  filter = list(ADEG = list(AVAL = list()))
)

shinyApp(app$ui, app$server)
```

{{< include ../../si.qmd >}}
:::
