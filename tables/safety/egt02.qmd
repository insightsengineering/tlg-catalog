---
title: EGT02
subtitle: ECG Abnormalities (EGT02_1 & EGT02_2)
---

------------------------------------------------------------------------

::: panel-tabset
## Data Setup

```{r setup, message=FALSE}
#| code-fold: show

library(dplyr)
library(scda)
library(tern)

adsl <- synthetic_cdisc_dataset("rcd_2022_10_13", "adsl")
adeg <- synthetic_cdisc_dataset("rcd_2022_10_13", "adeg")

# Ensure character variables are converted to factors and empty strings and NAs are explicit missing levels.
adsl <- df_explicit_na(adsl)
adeg <- df_explicit_na(adeg)

adeg <- adeg %>%
  mutate(
    ONTRTFL = ifelse(AVISIT %in% c("SCREENING", "BASELINE"), "", "Y")
  ) %>%
  var_relabel(
    ONTRTFL = "On Treatment Record Flag"
  )

# Note:  We keep only post-baseline for analysis.
adeg_f <- adeg %>%
  filter(ONTRTFL == "Y") %>%
  filter(PARAM %in% c("Heart Rate", "QT Duration", "RR Duration"))

map <- h_map_for_count_abnormal(
  df = adeg_f,
  variables = list(anl = "ANRIND", split_rows = "PARAM", range_low = "ANRLO", range_high = "ANRHI"),
  abnormal = list(low = "LOW", high = "HIGH"),
  method = "range",
  na_level = "<Missing>"
)
```

## ECG Abnormalities Regardless <br/> of Abnormality at Baseline

```{r default variant}
split_fun <- trim_levels_to_map(map = map)

lyt <- basic_table(show_colcounts = TRUE) %>%
  split_cols_by(var = "ARM") %>%
  split_rows_by(
    "PARAM",
    split_fun = split_fun,
    label_pos = "topleft",
    split_label = obj_label(adeg_f$PARAM)
  ) %>%
  count_abnormal("ANRIND", abnormal = list(low = "LOW", high = "HIGH"), exclude_base_abn = FALSE) %>%
  append_varlabels(adeg_f, "ANRIND", indent = 1L)


result <- build_table(lyt = lyt, df = adeg_f, alt_counts_df = adsl)
result
```

## ECG Abnormalities Among Subjects <br/> Without Abnormality at Baseline

```{r variant 2}
split_fun <- trim_levels_to_map(map = map)

lyt <- basic_table(show_colcounts = TRUE) %>%
  split_cols_by(var = "ARM") %>%
  split_rows_by(
    "PARAM",
    split_fun = split_fun,
    label_pos = "topleft",
    split_label = obj_label(adeg_f$PARAM)
  ) %>%
  count_abnormal("ANRIND", abnormal = list(low = "LOW", high = "HIGH"), exclude_base_abn = TRUE) %>%
  append_varlabels(adeg_f, "ANRIND", indent = 1L)

result <- build_table(lyt = lyt, df = adeg_f, alt_counts_df = adsl)
result
```

## Teal

```{r teal, message=FALSE}
#| screenshot.opts = list(delay = 18)

library(scda)
library(teal.modules.clinical)
library(dplyr)

adsl <- synthetic_cdisc_dataset("rcd_2022_10_13", "adsl")
adeg <- synthetic_cdisc_dataset("rcd_2022_10_13", "adeg") %>%
  mutate(
    ONTRTFL = ifelse(AVISIT %in% c("SCREENING", "BASELINE"), "", "Y")
  ) %>%
  var_relabel(
    ONTRTFL = "On Treatment Record Flag"
  )

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", adsl, code = 'ADSL <- synthetic_cdisc_dataset("rcd_2022_10_13", "adsl")'),
    cdisc_dataset("ADEG", adeg,
      code = 'ADEG <- synthetic_cdisc_dataset("rcd_2022_10_13", "adeg") %>%
                mutate(
                  ONTRTFL = ifelse(AVISIT %in% c("SCREENING", "BASELINE"), "", "Y")
                ) %>%
                var_relabel(
                  ONTRTFL = "On Treatment Record Flag"
                )'
    ),
    check = TRUE
  ),
  modules = modules(
    tm_t_abnormality(
      label = "Abnormality Table",
      dataname = "ADEG",
      arm_var = choices_selected(
        choices = variable_choices(adsl, subset = c("ARM", "ARMCD")),
        selected = "ARM"
      ),
      by_vars = choices_selected(
        choices = variable_choices(adeg, subset = c("EGCAT", "PARAM", "AVISIT")),
        selected = c("PARAM"),
        keep_order = TRUE
      ),
      grade = choices_selected(
        choices = variable_choices(adeg, subset = "ANRIND"),
        selected = "ANRIND",
        fixed = TRUE
      ),
      abnormal = list(low = "LOW", high = "HIGH"),
      exclude_base_abn = FALSE
    )
  )
)

shinyApp(app$ui, app$server)
```
:::
