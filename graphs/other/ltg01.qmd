---
title: LTG01
subtitle: Lattice Plot of Laboratory Tests by Treatment Group Over Time
---

------------------------------------------------------------------------

Lattice plots are natively handled by R, the examples below rely mostly on the package `ggplot2`.

::: panel-tabset
## Data Setup

```{r setup, message=FALSE}
#| code-fold: show

library(scda)
library(tern)
library(teal)
library(teal.modules.clinical)
library(ggplot2)
library(dplyr)
library(nestcolor)

# Datasets
adsl <- synthetic_cdisc_dataset("rcd_2022_10_13", "adsl") %>% slice(1:8)
adlb <- synthetic_cdisc_dataset("rcd_2022_10_13", "adlb") %>% filter(USUBJID %in% adsl$USUBJID)

# Pre-processing
adlb$AVISIT_txt <- adlb$AVISIT
adlb$AVISIT <- as.numeric(adlb$AVISIT)
adlb$ARM_N <- adlb$ARM
levels(adlb$ARM_N) <- with(
  data = adlb,
  paste0(
    levels(ARM_N), " (N = ",
    tapply(SUBJID, ARM_N, function(x) length(unique(x))), ")"
  )
)

# Plot utils
npch <- 1:25
npatients <- length(unique(adlb$SUBJID))
pch <- c(
  rep(npch, times = npatients %/% length(npch)),
  npch[1:(npatients %% length(npch))]
)
```

## Plot of Liver Function Tests

#### Basic Plot

```{r 1_1_application}
# General mapping and "lattice" ("facet" in ggplot2 nomenclature).
g1 <- {
  ggplot(
    data = adlb,
    mapping = aes(x = AVISIT, y = AVAL, colour = SUBJID, shape = SUBJID)
  ) +
    facet_grid(LBTESTCD ~ ARM, scales = "free_y") +
    scale_shape_manual(values = pch)
}

# Add points and lines.
g1 <- g1 + geom_point()
g1 <- g1 + geom_line()
g1
```

#### Modifying Facets

The units describing rows of panes and the number of patients under each arm is specified by modifying `facet_grid()`:

```{r 1_2_modify_facets}
# Include the units and the sample size N.
g2 <- g1 + facet_grid(
  paste0(LBTESTCD, "\n(", AVALU, ")") ~ ARM_N,
  scales = "free_y"
)

g2
```

#### Modifying X-Axis

The graphic elements are modified through usual `ggplot2` functions.
For instance, the x-axis could be improved as follows:

```{r 1_3_theme}
g3 <- g2 + theme(
  axis.text.x = element_text(angle = 45, hjust = 1),
  axis.title = element_blank()
) + scale_x_continuous(breaks = adlb$AVISIT, labels = adlb$AVISIT_txt)

g3
```

## Plot of Liver Function Tests <br/> Including Mean, Median, and 95% CIs

The functions `stat_mean_ci` and `stat_median_ci` from the `tern` package allow the addition of mean and/or median confidence intervals.
The example below suggests a larger dataset, where the individual subject legend may not be relevant but the mean or the median are of special interest.

#### Pre-Processing

```{r 2_0_pre-processing}
#| code-fold: show

# Datasets
adsl <- synthetic_cdisc_dataset("rcd_2022_10_13", "adsl") %>% slice(1:40)
adlb <- synthetic_cdisc_dataset("rcd_2022_10_13", "adlb") %>% filter(USUBJID %in% adsl$USUBJID)

# Pre-processing
adlb$AVISIT_txt <- adlb$AVISIT
adlb$AVISIT <- as.numeric(adlb$AVISIT)
adlb$ARM_N <- adlb$ARM
levels(adlb$ARM_N) <- with(
  data = adlb,
  paste0(
    levels(ARM_N), " (N = ",
    tapply(SUBJID, ARM_N, function(x) length(unique(x))), ")"
  )
)

# Plot utils
npch <- 1:25
npatients <- length(unique(adlb$SUBJID))
pch <- c(
  rep(npch, times = npatients %/% length(npch)),
  npch[1:(npatients %% length(npch))]
)
```

#### Basic Plot

```{r 2_1_application}
# General mapping and "lattice" ("facet" in ggplot2 nomenclature)
g4 <- {
  ggplot(
    data = adlb,
    mapping = aes(x = AVISIT, y = AVAL, colour = SUBJID, shape = SUBJID)
  ) +
    facet_grid(LBTESTCD ~ ARM_N, scales = "free_y") +
    scale_shape_manual(values = pch) +
    scale_color_manual(values = rep(getOption("ggplot2.discrete.colour"), 2))
}

# Add points and lines.
# Note that with so many patients, legend might not be useful and transparency
#   is advisable.
g4 <- g4 + geom_point(alpha = .3)
g4 <- g4 + geom_line(alpha = .3)
g4 <- g4 + guides(colour = "none", shape = "none")
g4 <- g4 + theme(
  axis.text.x = element_text(angle = 45, hjust = 1),
  axis.title  = element_blank()
)
g4 <- g4 + scale_x_continuous(breaks = adlb$AVISIT, labels = adlb$AVISIT_txt)
g4
```

#### Adding Mean

```{r 2_2_add_mean}
# Add the mean along with the 95% CI at every visit.
mean_text <- "Mean +/- 95% CI"
g51 <- g4 + stat_summary(
  fun = mean, linewidth = 1, geom = "line",
  aes(group = 1, linetype = mean_text)
)
g51 <- g51 + stat_summary(
  fun.data = stat_mean_ci, geom = "errorbar",
  aes(group = 1, linetype = mean_text)
)
g51
```

#### Adding Median

```{r 2_2_add_median}
# Instead of a mean, the median could be more relevant. Add the median and 95% CI as follows.
median_text <- "Median +/- 95% CI"
g52 <- g51 + stat_summary(
  fun = median, linewidth = 1, geom = "line",
  aes(group = 1, linetype = median_text)
)
g52 <- g52 + stat_summary(
  fun.data = stat_median_ci, geom = "errorbar",
  aes(group = 1, linetype = median_text)
)
g52 + guides(linetype = guide_legend(title = "Aggregate"))
```

#### Changing Confidence Level

```{r 2_2_change_conf_level}
# Change the confidence level of interval.
# Note: check `?stat_mean_ci()` and `?stat_median_ci()` for further fine tuning.
median_text <- "Median +/- 80% CI"
g53 <- g4 + stat_summary(
  fun = median, linewidth = 1, geom = "line",
  aes(group = 1, linetype = median_text)
)
g53 <- g53 + stat_summary(
  fun.data = function(x) stat_median_ci(x, conf_level = 0.8),
  geom = "errorbar", aes(group = 1, linetype = median_text)
)
g53
```

## Teal

```{r teal, message=FALSE}
#| code-fold: show

# In progress
```

{{< include ../../si.qmd >}}

:::
