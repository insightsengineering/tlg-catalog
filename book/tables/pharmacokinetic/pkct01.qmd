---
title: PKCT01
subtitle: Summary Concentration Table
---

------------------------------------------------------------------------

{{< include ../../test-utils/envir_hook.qmd >}}

::: panel-tabset
## Data Setup

```{r setup, message=FALSE}
#| code-fold: show

library(scda)
library(dplyr)
library(tern)

adpc <- synthetic_cdisc_dataset("latest", "adpc")

# Setting up the data
adpc_1 <- adpc %>%
  mutate(
    NFRLT = as.factor(NFRLT),
    AVALCAT1 = as.factor(AVALCAT1)
  ) %>%
  filter(ACTARM == "A: Drug X", PARAM == "Plasma Drug X") %>%
  mutate(ACTARM = factor(ACTARM, levels = c("A: Drug X"))) %>%
  select(NFRLT, ACTARM, VISIT, AVAL, PARAM, AVALCAT1) %>%
  var_relabel(NFRLT = "Nominal Time from First Dose (hr)")

# Helper function
three_sig_fmt <- function(x, ...) {
  as.character(signif(x, 3))
}

# Row structure
l_rows <- basic_table() %>%
  split_rows_by(
    var = "ACTARM",
    split_label = "Cohort/Treatment",
    label_pos = "topleft"
  ) %>%
  split_rows_by(
    var = "VISIT",
    split_label = "Visit",
    label_pos = "topleft"
  ) %>%
  split_rows_by(
    var = "NFRLT",
    split_fun = drop_split_levels,
    split_label = obj_label(adpc_1$NFRLT),
    label_pos = "topleft",
    child_labels = "hidden"
  )
```

```{r}
summary_stats_imp <- function(df, stat, imp, post = FALSE) {
  n_blq <- sum(df$AVALCAT1 %in% c("BLQ", "LTR", "<PCLLOQ"))
  ltr_blq_ratio <- n_blq / max(1, nrow(df))

  x_no_negative_vals <- df$AVAL
  x_no_negative_vals[x_no_negative_vals <= 0] <- NA

  x_stat <- if (ltr_blq_ratio <= imp) {
    list(
      n_blq = n_blq,
      mean = mean(df$AVAL, na.rm = TRUE),
      sd = sd(df$AVAL, na.rm = TRUE),
      cv = sd(df$AVAL, na.rm = TRUE) / mean(df$AVAL, na.rm = TRUE) * 100,
      geom_mean = if (post || imp == 1 / 2) exp(mean(log(x_no_negative_vals), na.rm = TRUE)) else NA,
      geom_cv = sqrt(exp(stats::sd(log(x_no_negative_vals), na.rm = FALSE)^2) - 1) * 100,
      median = median(df$AVAL, na.rm = TRUE),
      min = min(df$AVAL, na.rm = TRUE),
      max = max(df$AVAL, na.rm = TRUE)
    )
  } else {
    list(
      n_blq = n_blq,
      mean = NA,
      sd = NA,
      cv = NA,
      geom_mean = if (post && imp == 1 / 3) exp(mean(log(x_no_negative_vals), na.rm = TRUE)) else NA,
      geom_cv = NA,
      median = if (imp == 1 / 3) median(df$AVAL, na.rm = TRUE) else NA,
      min = NA,
      max = max(df$AVAL, na.rm = TRUE)
    )
  }
  x_stat[[stat]]
}

analyze_pk_vars_in_cols <- function(lyt,
                                    vars,
                                    imp_rule = NULL,
                                    ...,
                                    .stats = c(
                                      "n", "n_blq", "mean", "sd", "cv", "geom_mean",
                                      "geom_cv", "median", "min", "max"
                                    ),
                                    .formats = c(
                                      n = "xx.",
                                      n_blq = "xx.",
                                      mean = three_sig_fmt,
                                      sd = three_sig_fmt,
                                      cv = "xx.x",
                                      median = three_sig_fmt,
                                      geom_mean = three_sig_fmt,
                                      geom_cv = "xx.x",
                                      min = three_sig_fmt,
                                      max = three_sig_fmt
                                    ),
                                    .labels = c(
                                      n = "n",
                                      n_blq = "Number\nof\nLTRs/BLQs",
                                      mean = "Mean",
                                      sd = "SD",
                                      cv = "CV (%) Mean",
                                      geom_mean = "Geometric Mean",
                                      geom_cv = "CV % Geometric Mean",
                                      median = "Median",
                                      min = "Minimum",
                                      max = "Maximum"
                                    ),
                                    .aligns = "decimal",
                                    .indent_mods = NULL) {
  checkmate::assert_int(.indent_mods, null.ok = TRUE)
  if (length(vars) == 1) {
    vars <- rep(vars, length(.stats))
  } else if (length(vars) != length(.stats)) {
    stop(
      "Analyzed variables (vars) does not have the same ",
      "number of elements of specified statistics (.stats)."
    )
  }

  # Main col split
  lyt <- split_cols_by_multivar(
    lyt = lyt,
    vars = vars,
    varlabels = .labels[.stats]
  )

  # Function list for analyze_colvars
  afun_list <- Map(
    function(stat) {
      function(u, .spl_context, .df_row, ...) {
        if (stat == "n" | is.null(imp_rule)) {
          res <- s_summary(u, ...)[[stat]]
          na_level <- "NE"
        } else if (imp_rule == "1/3") {
          res <- summary_stats_imp(.df_row, stat, imp = 1 / 3, post = as.numeric(tail(.spl_context$value, 1)) > 0)
          na_level <- if (stat %in% c("mean", "min", "sd", "cv_mean", "cv_geomean")) "ND" else "NE"
        } else if (imp_rule == "1/2") {
          res <- summary_stats_imp(.df_row, stat, imp = 1 / 2, post = FALSE)
          na_level <- "ND"
        }
        
        if (is.list(res)) {
          if (length(res) > 1) {
            stop("The analyzed column produced more than one category of results.")
          } else {
            res <- unlist(res)
          }
        }

        rcell(
          res,
          label = .spl_context$value[nrow(.spl_context)],
          format = .formats[names(.formats) == stat][[1]],
          format_na_str = na_level,
          indent_mod = ifelse(is.null(.indent_mods), 0L, .indent_mods),
          align = .aligns
        )
      }
    },
    stat = .stats
  )

  analyze_colvars(
    lyt,
    afun = afun_list,
    nested = TRUE,
    extra_args = list(...)
  )
}
```

## Standard Table (Stats in Columns)

```{r variant1, test = list(result_v1 = "result")}
lyt <- l_rows %>%
  analyze_pk_vars_in_cols(
    vars = c("AVAL", "AVALCAT1", rep("AVAL", 8))
  )

result <- build_table(lyt, df = adpc_1) %>% prune_table()

# Decorating
main_title(result) <- "Summary of PK Concentrations by Nominal Time and Treatment: PK Evaluable"
subtitles(result) <- c("Protocol: xxxxx", paste("Analyte: ", unique(adpc_1$PARAM)), paste("Treatment:", unique(adpc_1$ACTARM)))
main_footer(result) <- "NE: Not Estimable"

result
```

## Table Implementing 1/3 Imputation Rule

```{r variant2, test = list(result_v2 = "result")}
# Column results for numeric values
lyt <- l_rows %>%
  analyze_pk_vars_in_cols(
    vars = c("AVAL", "AVALCAT1", rep("AVAL", 8)),
    imp_rule = "1/3"
  )

result <- build_table(lyt, df = adpc_1) %>% prune_table()

# Decorating
main_title(result) <- "Summary of PK Concentrations by Nominal Time and Treatment: PK Evaluable"
subtitles(result) <- c("Protocol: xxxxx", paste("Analyte: ", unique(adpc_1$PARAM)), paste("Treatment:", unique(adpc_1$ACTARM)))
main_footer(result) <- "NE: Not Estimable"

result
```

## Table Implementing 1/2 Imputation Rule

```{r variant3, test = list(result_v3 = "result")}
lyt <- l_rows %>%
  analyze_pk_vars_in_cols(
    vars = c("AVAL", "AVALCAT1", rep("AVAL", 8)),
    imp_rule = "1/2"
  )

result <- build_table(lyt, df = adpc_1) %>% prune_table()

# Decorating
main_title(result) <- "Summary of PK Concentrations by Nominal Time and Treatment: PK Evaluable"
subtitles(result) <- c("Protocol: xxxxx", paste("Analyte: ", unique(adpc_1$PARAM)), paste("Treatment:", unique(adpc_1$ACTARM)))
main_footer(result) <- "NE: Not Estimable"

result
```

{{< include ../../test-utils/save_results.qmd >}}

## `teal` App

```{r teal, message=FALSE, opts.label='skip_if_testing'}
#| code-fold: show

# In progress
```

{{< include ../../repro.qmd >}}
:::
