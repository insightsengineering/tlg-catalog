---
title: PKCT01
subtitle: Summary Concentration Table
---

------------------------------------------------------------------------

{{< include ../../test-utils/envir_hook.qmd >}}

::: panel-tabset
## Data Setup

```{r setup, message=FALSE}
#| code-fold: show

library(scda)
library(dplyr)
library(tern)

adpc <- synthetic_cdisc_dataset("latest", "adpc")

# Setting up the data
adpc_1 <- adpc %>%
  mutate(
    NFRLT = as.factor(NFRLT),
    AVALCAT1 = as.factor(AVALCAT1)
  ) %>%
  filter(ACTARM == "A: Drug X", PARAM == "Plasma Drug X") %>%
  select(NFRLT, ACTARM, VISIT, AVAL, PARAM, AVALCAT1) %>%
  var_relabel(NFRLT = "Nominal Time from First Dose (hr)")

# Formatting function - 3 significant figures
three_sig_fmt <- function(x, ...) {
  as.character(signif(x, 3))
}

# Row structure
lyt_rows <- basic_table() %>%
  split_rows_by(
    var = "ACTARM",
    split_fun = drop_split_levels,
    split_label = "Treatment Group",
    label_pos = "topleft"
  ) %>%
  split_rows_by(
    var = "VISIT",
    split_fun = drop_split_levels,
    split_label = "Visit",
    label_pos = "topleft"
  ) %>%
  split_rows_by(
    var = "NFRLT",
    split_fun = drop_split_levels,
    split_label = obj_label(adpc_1$NFRLT),
    label_pos = "topleft",
    child_labels = "hidden"
  )
```

```{r helper funs}
imp_stats <- function(df, x_stats, stat, imp, post = FALSE) {
  n_blq <- sum(df$AVALCAT1 %in% c("BLQ", "LTR", "<PCLLOQ"))
  ltr_blq_ratio <- n_blq / max(1, nrow(df))

  # defaults
  val <- x_stats[[stat]]
  na_level = "NE"
  
  if (ltr_blq_ratio <= imp) {
    if (imp == 1 / 3 && stat == "geom_mean") val <- NA
  } else {
    if (!(imp == 1 / 3 && stat == "geom_mean")) na_level <- "ND"
    if (!stat %in% c("median", "max", "geom_mean")) val <- NA
    if ((imp == 1 / 3 && !post || imp == 1 / 2) && stat == "geom_mean") val <- NA
    if (imp == 1 / 2 && stat == "median") val <- NA
  }
  list(val = val, na_level = na_level)
}

analyze_pk_vars_in_cols <- function(lyt,
                                    vars,
                                    imp_rule = NULL,
                                    na_level = "NE",
                                    ...,
                                    .stats = c(
                                      "n", "n_blq", "mean", "sd", "cv", "geom_mean",
                                      "geom_cv", "median", "min", "max"
                                    ),
                                    .formats = c(
                                      n = "xx.",
                                      n_blq = "xx.",
                                      mean = three_sig_fmt,
                                      sd = three_sig_fmt,
                                      cv = "xx.x",
                                      median = three_sig_fmt,
                                      geom_mean = three_sig_fmt,
                                      geom_cv = "xx.x",
                                      min = three_sig_fmt,
                                      max = three_sig_fmt
                                    ),
                                    .labels = c(
                                      n = "n",
                                      n_blq = "Number\nof\nLTRs/BLQs",
                                      mean = "Mean",
                                      sd = "SD",
                                      cv = "CV (%) Mean",
                                      geom_mean = "Geometric Mean",
                                      geom_cv = "CV % Geometric Mean",
                                      median = "Median",
                                      min = "Minimum",
                                      max = "Maximum"
                                    ),
                                    .aligns = "decimal",
                                    .indent_mods = NULL) {
  checkmate::assert_int(.indent_mods, null.ok = TRUE)
  checkmate::assert_subset(.stats, c("n", "n_blq", "mean", "sd", "cv", "geom_mean", "geom_cv", "median", "min", "max"))
  if (length(vars) == 1) {
    vars <- rep(vars, length(.stats))
  } else if (length(vars) != length(.stats)) {
    stop(
      "Analyzed variables (vars) does not have the same ",
      "number of elements of specified statistics (.stats)."
    )
  }

  # Main col split
  env <- new.env() # create caching environment
  lyt <- split_cols_by_multivar(
    lyt = lyt,
    vars = vars,
    varlabels = .labels[.stats],
    extra_args = list(cache_env = replicate(length(.stats), list(env)))
  )

  # Function list for analyze_colvars
  afun_list <- Map(
    function(stat) {
      function(u, .spl_context, .df_row, .var, cache_env = NULL, ...) {
        var_row_val <- paste(.var, tail(.spl_context$value, 1), sep = "_")
        if (is.null(cache_env[[var_row_val]])) cache_env[[var_row_val]] <- s_summary(u, ...)
        x_stats <- cache_env[[var_row_val]]
        
        if (stat %in% c("n", "n_blq") | is.null(imp_rule)) {
          res <- x_stats[[stat]]
        } else {
          imp <- if (imp_rule == "1/3") 1 / 3 else 1 / 2
          res_imp <- imp_stats(.df_row, x_stats, stat, imp = imp, post = as.numeric(tail(.spl_context$value, 1)) > 0)
          res <- res_imp[["val"]]
          na_level <- res_imp[["na_level"]]
        }
        
        if (is.list(res)) {
          if (length(res) > 1) {
            stop("The analyzed column produced more than one category of results.")
          } else {
            res <- unlist(res)
          }
        }

        rcell(
          res,
          label = .spl_context$value[nrow(.spl_context)],
          format = .formats[names(.formats) == stat][[1]],
          format_na_str = na_level,
          indent_mod = ifelse(is.null(.indent_mods), 0L, .indent_mods),
          align = .aligns
        )
      }
    },
    stat = .stats
  )

  analyze_colvars(
    lyt,
    afun = afun_list,
    nested = TRUE,
    extra_args = list(...)
  )
}
```

## Standard Table (Stats in Columns)

```{r variant1, test = list(result_v1 = "result")}
lyt <- lyt_rows %>%
  analyze_pk_vars_in_cols(
    vars = c("AVAL", "AVALCAT1", rep("AVAL", 8))
  )

result <- build_table(lyt, df = adpc_1) %>% prune_table()

# Decorating
main_title(result) <- "Summary of PK Concentrations by Nominal Time and Treatment: PK Evaluable"
subtitles(result) <- c("Protocol: xxxxx", paste("Analyte: ", unique(adpc_1$PARAM)), paste("Treatment:", unique(adpc_1$ACTARM)))
main_footer(result) <- "NE: Not Estimable"

result
```

## Table Implementing 1/3 Imputation Rule

```{r variant2, test = list(result_v2 = "result")}
lyt <- lyt_rows %>%
  analyze_pk_vars_in_cols(
    vars = c("AVAL", "AVALCAT1", rep("AVAL", 8)),
    imp_rule = "1/3"
  )

result <- build_table(lyt, df = adpc_1) %>% prune_table()

# Decorating
main_title(result) <- "Summary of PK Concentrations by Nominal Time and Treatment: PK Evaluable"
subtitles(result) <- c("Protocol: xxxxx", paste("Analyte: ", unique(adpc_1$PARAM)), paste("Treatment:", unique(adpc_1$ACTARM)))
main_footer(result) <- c("NE: Not Estimable", "ND: Not Derived")

result
```

## Table Implementing 1/2 Imputation Rule

```{r variant3, test = list(result_v3 = "result")}
lyt <- lyt_rows %>%
  analyze_pk_vars_in_cols(
    vars = c("AVAL", "AVALCAT1", rep("AVAL", 8)),
    imp_rule = "1/2"
  )

result <- build_table(lyt, df = adpc_1) %>% prune_table()

# Decorate table
main_title(result) <- "Summary of PK Concentrations by Nominal Time and Treatment: PK Evaluable"
subtitles(result) <- c("Protocol: xxxxx", paste("Analyte: ", unique(adpc_1$PARAM)), paste("Treatment:", unique(adpc_1$ACTARM)))
main_footer(result) <- "ND: Not Derived"

result
```

{{< include ../../test-utils/save_results.qmd >}}

## `teal` App

```{r teal, message=FALSE, opts.label='skip_if_testing'}
#| code-fold: show

# In progress
```

{{< include ../../repro.qmd >}}
:::
