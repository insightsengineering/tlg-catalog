---
title: EGT01
subtitle: ECG Results and Change from Baseline by Visit
---

------------------------------------------------------------------------

{{< include ../../_utils/envir_hook.qmd >}}

:::: {.panel-tabset}
## Data Setup

```{r setup, message = FALSE}
#| code-fold: show

library(dplyr)
library(tern)

# Data should be filtered for the studied Parameter (`PARAM`) and the
# Analysis Visit (`AVISIT`). According to the GDSR template, the values for
# the `AVISIT` reported in the EGT01 standard may be:
# 'POST-BASELINE MAXIMUM', 'POST-BASELINE MINIMUM', 'POST-BASELINE LAST'.

adsl <- random.cdisc.data::cadsl
adeg <- random.cdisc.data::cadeg

# Ensure character variables are converted to factors and empty strings and NAs are explicit missing levels.
adsl <- df_explicit_na(adsl)
adeg <- df_explicit_na(adeg)

adeg_f <- adeg %>%
  filter(ANL01FL == "Y") %>%
  filter(PARAM %in% c("Heart Rate", "QT Duration", "RR Duration"))
```

## Standard Table

::: {.panel-tabset .nav-justified group="webr"}
## {{< fa regular file-lines sm fw >}} Preview

```{r variant1, test = list(result_v1 = "result")}
# Define the split function
split_fun <- drop_split_levels

afun <- function(x, .var, .spl_context, ...) {
  n_fun <- sum(!is.na(x), na.rm = TRUE)
  if (n_fun == 0) {
    mean_sd_fun <- c(NA, NA)
    median_fun <- NA
    min_max_fun <- c(NA, NA)
  } else {
    mean_sd_fun <- c(mean(x, na.rm = TRUE), sd(x, na.rm = TRUE))
    median_fun <- median(x, na.rm = TRUE)
    min_max_fun <- c(min(x), max(x))
  }
  is_chg <- .var == "CHG"
  is_baseline <- .spl_context$value[which(.spl_context$split == "AVISIT")] == "BASELINE"
  if (is_baseline && is_chg) n_fun <- mean_sd_fun <- median_fun <- min_max_fun <- NULL

  in_rows(
    "n" = n_fun,
    "Mean (SD)" = mean_sd_fun,
    "Median" = median_fun,
    "Min - Max" = min_max_fun,
    .formats = list("n" = "xx", "Mean (SD)" = "xx.xx (xx.xx)", "Median" = "xx.xx", "Min - Max" = "xx.xx - xx.xx"),
    .format_na_strs = list("n" = "NE", "Mean (SD)" = "NE (NE)", "Median" = "NE", "Min - Max" = "NE - NE")
  )
}

lyt <- basic_table(show_colcounts = TRUE) %>%
  split_cols_by("ACTARM") %>%
  split_rows_by("PARAM", split_fun = split_fun, label_pos = "topleft", split_label = obj_label(adeg_f$PARAM)) %>%
  split_rows_by("AVISIT", split_fun = split_fun, label_pos = "topleft", split_label = obj_label(adeg_f$AVISIT)) %>%
  split_cols_by_multivar(
    vars = c("AVAL", "CHG"),
    varlabels = c("Value at Visit", "Change from\nBaseline")
  ) %>%
  analyze_colvars(afun = afun)

result <- build_table(lyt, adeg_f, alt_counts_df = adsl)
result
```

`r webr_code_labels <- c("setup", "variant1")`
{{< include ../../_utils/webr.qmd >}}
:::

{{< include ../../_utils/save_results.qmd >}}

## `teal` App

::: {.panel-tabset .nav-justified}
## {{< fa regular file-lines fa-sm fa-fw >}} Preview

<!-- skip eval because of https://github.com/insightsengineering/teal.modules.clinical/pull/1087 -->

```{r teal, opts.label = c("skip_if_testing", "app"), eval = packageVersion("teal.modules.clinical") >= "0.9.0.9007"}
library(teal.modules.clinical)

## Data reproducible code
data <- teal_data()
data <- within(data, {
  ADSL <- random.cdisc.data::cadsl
  ADEG <- random.cdisc.data::cadeg

  # Ensure character variables are converted to factors and empty strings and NAs are explicit missing levels.
  ADSL <- df_explicit_na(ADSL)
  ADEG <- df_explicit_na(ADEG)
})
datanames <- c("ADSL", "ADEG")
datanames(data) <- datanames
join_keys(data) <- default_cdisc_join_keys[datanames]

## Reusable Configuration For Modules
ADSL <- data[["ADSL"]]
ADEG <- data[["ADEG"]]

## Setup App
app <- init(
  data = data,
  modules = modules(
    tm_t_summary_by(
      label = "ECG Results and Change from Baseline by Visit",
      dataname = "ADEG",
      arm_var = choices_selected(
        choices = variable_choices(ADSL, c("ARM", "ARMCD")),
        selected = "ARM"
      ),
      by_vars = choices_selected(
        choices = variable_choices(ADEG, c("PARAM", "AVISIT")),
        selected = c("AVISIT")
      ),
      summarize_vars = choices_selected(
        choices = variable_choices(ADEG, c("AVAL", "CHG")),
        selected = c("AVAL")
      ),
      useNA = "ifany",
      paramcd = choices_selected(
        choices = value_choices(ADEG, "PARAMCD", "PARAM"),
        selected = "HR"
      ),
      parallel_vars = TRUE
    )
  ),
  filter = teal_slices(teal_slice("ADEG", "AVAL", selected = NULL))
)

shinyApp(app$ui, app$server)
```

{{< include ../../_utils/shinylive.qmd >}}
:::

{{< include ../../repro.qmd >}}

::::
