---
title: AET09_SMQ
subtitle: Adverse Events Related to Study Drug by Standardized MedDRA Query
---

------------------------------------------------------------------------

{{< include ../../test-utils/envir_hook.qmd >}}

::: panel-tabset
## Data Setup

```{r setup, message=FALSE}
#| code-fold: show

library(dplyr)
library(tern)
library(scda)
library(stringr)

adsl <- synthetic_cdisc_dataset("latest", "adsl")
adae <- synthetic_cdisc_dataset("latest", "adae")

# Ensure character variables are converted to factors and empty strings and NAs are explicit missing
# levels. For details, refer to Teal and Study Data article.
adsl <- df_explicit_na(adsl)
adae <- df_explicit_na(adae)

# AEs are filtered for relatedness to study drug.
adae_rel <- adae %>% filter(AEREL == "Y")

# Simulate a random AAG dataset.
aag <- data.frame(
  NAMVAR = c("SMQ01NAM", "SMQ01NAM", "SMQ02NAM", "CQ01NAM", "CQ01NAM"),
  SRCVAR = rep("AEDECOD", 5),
  GRPTYPE = c("SMQ", "SMQ", "SMQ", "CUSTOM", "CUSTOM"),
  REFID = c(1, 1, 2, 3, 3),
  REFNAME = c(rep("C.1.1.1.3/B.2.2.3.1 AESI", 2), "non observed SMQ02NAM level", rep("D.2.1.5.3/A.1.1.1.1 AESI", 2)),
  SCOPE = c("BROAD", "BROAD", "BROAD", "", ""),
  REFTERM = c("C.1.1.1.3", "B.2.2.3.1", "Z.9.9.9.9", "D.2.1.5.3", "A.1.1.1.1"),
  stringsAsFactors = FALSE
)

# Create summary AAG dataset (used for labelling).
# Note it's important to incorporate SCOPE into the basket names for SMQs so as to
# match the flags present in ADAE.
aag_summary <- aag %>%
  select(NAMVAR, REFNAME, SCOPE) %>%
  unique() %>%
  mutate(
    REFNAME_SCOPE = ifelse(SCOPE == "", REFNAME, paste0(REFNAME, "(", SCOPE, ")"))
  ) %>%
  rename(basket = NAMVAR, basket_name = REFNAME_SCOPE) %>%
  select(basket, basket_name)

# Make a summary of the full ADAE based on AAG by using h_stack_by_baskets helper function
adae_smq_all <- h_stack_by_baskets(df = adae_rel, aag_summary = aag_summary, keys = c("STUDYID", "USUBJID", "ACTARMCD", "AEDECOD"))

# Post-process adae_smq_all to keep only certain baskets of interest for variant 1
# Not need to drop baskets for variant 2 as all baskets will be considered.
baskets_to_drop_variant <- aag_summary$basket_name[!aag_summary$basket %in% c("SMQ01NAM")]

# Adjust the analysis dataset based on basket subset for variant 1.
adae_smq_1 <- adae_smq_all %>%
  filter(!adae_smq_all$SMQ %in% baskets_to_drop_variant) %>%
  mutate(
    SMQ = tern::fct_discard(SMQ, discard = baskets_to_drop_variant)
  )
```

## Standard Table

```{r variant1, test = list(result_v1 = "result")}
criteria_fun <- function(tr) !is(tr, "ContentRow") && all_zero_or_na(tr)

lyt <- basic_table(show_colcounts = TRUE) %>%
  split_cols_by("ACTARMCD") %>%
  analyze_num_patients(
    vars = "USUBJID",
    .stats = c("unique"),
    .labels = c(
      unique = "Total number of patients with at least one adverse event"
    )
  ) %>%
  split_rows_by(
    "SMQ",
    child_labels = "visible",
    nested = FALSE,
    split_fun = trim_levels_in_group("AEDECOD", drop_outlevs = FALSE),
    label_pos = "topleft",
    split_label = "Standardized MedDRA Query"
  ) %>%
  summarize_num_patients(
    var = "USUBJID",
    .stats = c("unique", "nonunique"),
    .labels = c(
      unique = "Total number of patients with at least one adverse event",
      nonunique = "Total number of events"
    )
  ) %>%
  count_occurrences(
    vars = "AEDECOD",
    .indent_mods = -1L,
    drop = FALSE
  ) %>%
  append_varlabels(adae, "AEDECOD", indent = 1L)

result <- build_table(
  lyt,
  df = adae_smq_1,
  alt_counts_df = adsl
) %>%
  sort_at_path(path = c("SMQ"), scorefun = cont_n_allcols) %>%
  sort_at_path(path = c("SMQ", "*", "AEDECOD"), scorefun = score_occurrences, na.pos = "last") %>%
  trim_rows(criteria = criteria_fun)

result
```

## Table with Customized Queries

```{r variant2, test = list(result_v2 = "result")}
criteria_fun <- function(tr) !is(tr, "ContentRow") && all_zero_or_na(tr)

lyt <- basic_table(show_colcounts = TRUE) %>%
  split_cols_by("ACTARMCD") %>%
  analyze_num_patients(
    vars = "USUBJID",
    .stats = c("unique"),
    .labels = c(
      unique = "Total number of patients with at least one adverse event"
    )
  ) %>%
  split_rows_by(
    "SMQ",
    child_labels = "visible",
    nested = FALSE,
    split_fun = trim_levels_in_group("AEDECOD", drop_outlevs = FALSE),
    label_pos = "topleft",
    split_label = "Standardized MedDRA Query"
  ) %>%
  summarize_num_patients(
    var = "USUBJID",
    .stats = c("unique", "nonunique"),
    .labels = c(
      unique = "Total number of patients with at least one adverse event",
      nonunique = "Total number of events"
    )
  ) %>%
  count_occurrences(
    vars = "AEDECOD",
    .indent_mods = -1L,
    drop = FALSE
  ) %>%
  append_varlabels(adae, "AEDECOD", indent = 1L)

result <- build_table(
  lyt,
  df = adae_smq_all,
  alt_counts_df = adsl
) %>%
  sort_at_path(path = c("SMQ"), scorefun = cont_n_allcols) %>%
  sort_at_path(path = c("SMQ", "*", "AEDECOD"), scorefun = score_occurrences, na.pos = "last") %>%
  trim_rows(criteria = criteria_fun)

result
```

{{< include ../../test-utils/save_results.qmd >}}

## Teal

Note that filtering AEs for relatedness to study drug is not a necessary data pre-processing step for the module.
It can be achieved using the `teal` module filter panel.
The example here pre-sets the filters using `AEREL = "Y"` in `adae`.

```{r teal, message=FALSE}
#| screenshot.opts = list(delay = 12)

library(scda)
library(teal.modules.clinical)
library(dplyr)

adsl <- synthetic_cdisc_dataset("latest", "adsl")
adae <- synthetic_cdisc_dataset("latest", "adae")

names_baskets <- grep("^(SMQ|CQ).*NAM$", names(adae), value = TRUE)
names_scopes <- grep("^SMQ.*SC$", names(adae), value = TRUE)

cs_baskets <- choices_selected(
  choices = variable_choices(adae, subset = names_baskets),
  selected = names_baskets
)
cs_scopes <- choices_selected(
  choices = variable_choices(adae, subset = names_scopes),
  selected = names_scopes,
  fixed = TRUE
)

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", adsl,
      code = 'ADSL <- synthetic_cdisc_dataset("latest", "adsl")'
    ),
    cdisc_dataset("ADAE", adae,
      code = 'ADAE <- synthetic_cdisc_dataset("latest", "adae")'
    ),
    check = TRUE
  ),
  modules = modules(
    tm_t_smq(
      label = "Adverse Events by SMQ Table",
      dataname = "ADAE",
      arm_var = choices_selected(
        choices = variable_choices(adsl, subset = c("ARM", "SEX")),
        selected = "ARM"
      ),
      add_total = FALSE,
      baskets = cs_baskets,
      scopes = cs_scopes,
      llt = choices_selected(
        choices = variable_choices(adae, subset = c("AEDECOD")),
        selected = "AEDECOD"
      )
    )
  ),
  filter = list(ADAE = list(AEREL = "Y"))
)

shinyApp(app$ui, app$server)
```

{{< include ../../si.qmd >}}

:::
