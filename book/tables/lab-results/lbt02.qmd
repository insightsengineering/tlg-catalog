---
title: LBT02
subtitle: Laboratory Test Results by Visit
---

------------------------------------------------------------------------

{{< include ../../test-utils/envir_hook.qmd >}}

::: panel-tabset
## Data Setup

```{r setup, message=FALSE}
#| code-fold: show

# Preparation of an illustrative dataset
library(scda)
library(tern)

adsl <- synthetic_cdisc_dataset("latest", "adsl")
adlb <- synthetic_cdisc_dataset("latest", "adlb")

adlb_labels <- var_labels(adlb)

# For illustration purposes, the example focuses on ALT
# Measurements starting from baseline and excluding all screening visits
adlb <- subset(adlb, AVISIT != "SCREENING" & PARAMCD == "ALT")
adlb$AVISIT <- droplevels(adlb$AVISIT)

var_labels(adlb) <- adlb_labels

# Ensure character variables are converted to factors and empty strings and NAs are explicit missing levels.
adsl <- df_explicit_na(adsl)
adlb <- df_explicit_na(adlb)
```

## Standard Table

```{r variant1, test = list(result_v1 = "result")}
# Define the split function
split_fun <- drop_split_levels

l <- basic_table(show_colcounts = TRUE) %>%
  split_cols_by(var = "ARM") %>%
  add_overall_col("All Patients") %>%
  split_rows_by(
    var = "AVISIT",
    split_fun = split_fun,
    label_pos = "topleft",
    split_label = obj_label(adlb$AVISIT)
  ) %>%
  analyze_vars(vars = "AVAL")

result <- build_table(l,
  df = adlb,
  alt_counts_df = adsl
)
result
```

{{< include ../../test-utils/save_results.qmd >}}

## `teal` App

```{r teal, message=FALSE, opts.label='skip_if_testing'}
#| screenshot.opts = list(delay = 8)

library(scda)
library(teal.modules.clinical)
library(dplyr)

adsl <- synthetic_cdisc_dataset("latest", "adsl")
adlb <- synthetic_cdisc_dataset("latest", "adlb")

# Ensure missing and NA values are cleaned up and convert variables to factors.
adsl <- df_explicit_na(adsl)
adlb <- df_explicit_na(adlb)

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", adsl, code = 'ADSL <- synthetic_cdisc_dataset("latest", "adsl")
                                        ADSL <- df_explicit_na(ADSL)'),
    cdisc_dataset("ADLB", adlb, code = 'ADLB <- synthetic_cdisc_dataset("latest", "adlb")
                                        ADLB <- df_explicit_na(ADLB)'),
    check = TRUE
  ),
  modules = modules(
    tm_t_summary_by(
      label = "Laboratory Test Results by Visit",
      dataname = "ADLB",
      arm_var = choices_selected(
        choices = variable_choices(adsl, c("ARM", "ARMCD")),
        selected = "ARM"
      ),
      by_vars = choices_selected(
        choices = variable_choices(adlb, c("PARAM", "AVISIT")), # note: order matters here. If `PARAM` is first, the split will be first by `PARAM`and then by `AVISIT`
        selected = c("PARAM", "AVISIT")
      ),
      summarize_vars = choices_selected(
        choices = variable_choices(adlb, c("AVAL")),
        selected = c("AVAL")
      ),
      useNA = "ifany",
      paramcd = choices_selected(
        choices = value_choices(adlb, "PARAMCD", "PARAM"),
        selected = "ALT"
      )
    )
  ),
  filter = list(ADLB = list(AVAL = list()))
)
shinyApp(app$ui, app$server)
```

{{< include ../../repro.qmd >}}

:::
