---
title: LBT15
subtitle: Laboratory Test Shifts to NCI CTCAE Grade 3-4 Post-Baseline
---

------------------------------------------------------------------------

{{< include ../../test-utils/envir_hook.qmd >}}

::: panel-tabset
## Data Setup

Because the `scda` dataset `adlb` doesn't have the `PARCAT1` variable, this variable is created from `LBCAT` in pre-processing.

```{r setup, message=FALSE}
#| code-fold: show

library(scda)
library(tern)
library(dplyr)
library(forcats)

adsl <- synthetic_cdisc_dataset("latest", "adsl")
adlb <- synthetic_cdisc_dataset("latest", "adlb")

adlb <- adlb %>%
  mutate(
    BTOXGR = case_when(
      as.character(BTOXGR) == "" ~ "0",
      TRUE ~ as.character(BTOXGR)
    )
  ) %>%
  filter(ATOXGR %in% as.character(c(-4:4))) %>%
  filter(BTOXGR %in% as.character(c(-4:4))) %>%
  mutate(
    BTOXGR = factor(BTOXGR, levels = c(-4:4)),
    ATOXGR = factor(ATOXGR, levels = c(-4:4)),
    PARCAT1 = LBCAT
  )

adlb <- adlb %>%
  mutate(
    ATOXGR_CAT = fct_collapse(ATOXGR,
      "LOW" = c("-3", "-4"),
      "MODERATE/NORMAL" = c("-2", "-1", "0", "1", "2"),
      "HIGH" = c("3", "4")
    ),
    BTOXGR_CAT = fct_collapse(BTOXGR,
      "LOW" = c("-3", "-4"),
      "MODERATE/NORMAL" = c("-2", "-1", "0", "1", "2"),
      "HIGH" = c("3", "4")
    )
  ) %>%
  filter(ONTRTFL == "Y")

adlb_alt_cut <- adlb %>%
  mutate(
    ATOXGR_CAT = fct_collapse(ATOXGR,
      "LOW" = c("-2", "-3", "-4"),
      "MODERATE/NORMAL" = c("-1", "0", "1"),
      "HIGH" = c("2", "3", "4")
    ),
    BTOXGR_CAT = fct_collapse(BTOXGR,
      "LOW" = c("-2", "-3", "-4"),
      "MODERATE/NORMAL" = c("-1", "0", "1"),
      "HIGH" = c("2", "3", "4")
    )
  ) %>%
  filter(ONTRTFL == "Y")

adlb <- adlb %>% var_relabel(
  PARCAT1 = "Category for Lab Test",
  PARAM = "Parameter"
)
```

## Standard Table

```{r variant1, test = list(result_v1 = "result")}
# Argument exclude_base_abn must be TRUE to include patients with normal or abnormal in the opposite direction in the denom
# So for "High" direction, subjects with baseline grade 3-4 are not in the denom.
lyt <- basic_table(show_colcounts = TRUE) %>%
  split_cols_by(var = "ARM") %>%
  add_overall_col("All Patients") %>%
  split_rows_by("PARCAT1", split_fun = drop_split_levels, label_pos = "topleft", split_label = obj_label(adlb$PARCAT1)) %>%
  split_rows_by("PARAM", split_fun = drop_split_levels, label_pos = "topleft", split_label = obj_label(adlb$PARAM)) %>%
  count_abnormal(
    var = "ATOXGR_CAT",
    abnormal = list(low = "LOW", high = "HIGH"),
    variables = list(id = "USUBJID", baseline = "BTOXGR_CAT"),
    exclude_base_abn = TRUE,
    .indent_mods = 4L
  ) %>%
  append_topleft("            Direction of Abnormality")

result <- build_table(lyt, adlb, alt_counts_df = adsl)
result
```

## Table Modifying Cut Point

```{r variant2, test = list(result_v2 = "result")}
result <- build_table(lyt, adlb_alt_cut, alt_counts_df = adsl)
result
```

{{< include ../../test-utils/save_results.qmd >}}

## Teal

The current module `tm_t_abnormality` is only displaying rows that are not all-zero, so the result could be a little different from static output where all-zero rows can be shown.

```{r teal, message=FALSE, opts.label='skip_if_testing'}
#| screenshot.opts = list(delay = 12)

library(teal.modules.clinical)
library(forcats)
library(scda)

adsl <- synthetic_cdisc_dataset("latest", "adsl")
adlb <- synthetic_cdisc_dataset("latest", "adlb") %>%
  mutate(
    BTOXGR = case_when(
      as.character(BTOXGR) == "" ~ "0",
      TRUE ~ as.character(BTOXGR)
    )
  ) %>%
  filter(ATOXGR %in% as.character(c(-4:4))) %>%
  filter(BTOXGR %in% as.character(c(-4:4))) %>%
  mutate(
    BTOXGR = factor(BTOXGR, levels = c(-4:4)),
    ATOXGR = factor(ATOXGR, levels = c(-4:4))
  ) %>%
  mutate(
    ATOXGR_CAT = fct_collapse(ATOXGR,
      "LOW" = c("-3", "-4"),
      "MODERATE/NORMAL" = c("-2", "-1", "0", "1", "2"),
      "HIGH" = c("3", "4")
    ),
    BTOXGR_CAT = fct_collapse(BTOXGR,
      "LOW" = c("-3", "-4"),
      "MODERATE/NORMAL" = c("-2", "-1", "0", "1", "2"),
      "HIGH" = c("3", "4")
    )
  ) %>%
  filter(ONTRTFL == "Y") %>%
  var_relabel(ATOXGR_CAT = "Direction of Abnormality")

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", adsl, code = 'ADSL <- synthetic_cdisc_dataset("latest", "adsl")'),
    cdisc_dataset("ADLB", adlb, code = '
                  ADLB <- synthetic_cdisc_dataset("latest", "adlb") %>%
                    mutate(
                      BTOXGR = case_when(
                        as.character(BTOXGR) == "" ~ "0",
                        TRUE ~ as.character(BTOXGR)
                      )
                    ) %>%
                    filter(ATOXGR %in% as.character(c(-4:4))) %>%
                    filter(BTOXGR %in% as.character(c(-4:4))) %>%
                    mutate(
                      BTOXGR = factor(BTOXGR, levels = c(-4:4)),
                      ATOXGR = factor(ATOXGR, levels = c(-4:4))
                    )%>%
                    mutate(
                      ATOXGR_CAT = fct_collapse(ATOXGR,
                                                "LOW" = c("-3", "-4"),
                                                "MODERATE/NORMAL" = c("-2", "-1", "0", "1", "2"),
                                                "HIGH" = c("3", "4")
                      ),
                      BTOXGR_CAT = fct_collapse(BTOXGR,
                                                "LOW" = c("-3", "-4"),
                                                "MODERATE/NORMAL" = c("-2", "-1", "0", "1", "2"),
                                                "HIGH" = c("3", "4")
                      )
                    ) %>%
                    filter(ONTRTFL == "Y") %>%
                    var_relabel(ATOXGR_CAT = "Direction of Abnormality")
                '),
    check = TRUE
  ),
  modules = modules(
    tm_t_abnormality(
      label = "Abnormality Table",
      dataname = "ADLB",
      arm_var = choices_selected(
        choices = variable_choices(adsl, subset = c("ARM", "ARMCD")),
        selected = "ARM"
      ),
      by_vars = choices_selected(
        choices = variable_choices(adlb, subset = c("PARAM")),
        selected = c("PARAM"),
        keep_order = TRUE
      ),
      grade = choices_selected(
        choices = variable_choices(adlb, subset = "ATOXGR_CAT"),
        selected = "ATOXGR_CAT",
        fixed = TRUE
      ),
      baseline_var = choices_selected(
        choices = variable_choices(adlb, subset = "BTOXGR_CAT"),
        selected = "BTOXGR_CAT",
        fixed = TRUE
      ),
      abnormal = list(low = "LOW", high = "HIGH"),
      exclude_base_abn = TRUE
    )
  )
)

shinyApp(app$ui, app$server)
```

{{< include ../../si.qmd >}}

:::
